package main

import (
	"fmt"
	"os"
)

type point struct {
	x, y int
}

func main() {
	p := point{1, 2}

	//описание переменной, включая их значения
	fmt.Printf("%v\n", p)
	//описание переменной, включая имена переменных и их значения
	fmt.Printf("%+v\n", p)
	//полное описание переменной, включая тип, имена переменных и их значения
	fmt.Printf("%#v\n", p)
	//тип переменной вывода
	fmt.Printf("%T\n", p)
	//форматирование булвых значений
	fmt.Printf("%t\n", true)
	//форматирование стандартных 10-и значных чисел
	fmt.Printf("%d\n", 123)
	//бинарное значение
	fmt.Printf("%b\n", 14)
	//чар значение
	fmt.Printf("%c\n", 33)
	//хекс значение
	fmt.Printf("%x\n", 456)
	fmt.Printf("%x\n", "hex this")
	//для форматирования десятичных чисел
	fmt.Printf("%f\n", 78.9)

	//приведение к более математическому виду числа
	fmt.Printf("%e\n", 123400000.0)
	fmt.Printf("%E\n", 123400000.0)

	//для форматирования строк
	fmt.Printf("%s\n", "\"string\"")
	//для форматирования строк с двойными ковычками(quote)
	fmt.Printf("%q\n", "\"string\"")

	//формат пути к указателю
	fmt.Printf("%p\n", &p)

	//если задано число перед форматером, это число указывает
	//сколько строк надо отступить, оно всегда приравнивается к правому краю
	fmt.Printf("|%6d|%6d|\n", 12, 345)

	//так же форматируются десятичные, но с одним но, значение после точки указывает
	//какое количество цифер после плавающей запятой отображать
	fmt.Printf("|%6.2f|%6.2f|\n", 1.2, 3.45)

	//для прирванивания по левому краю используется знак -
	fmt.Printf("|%-6.2f|%-6.2f|\n", 1.2, 3.45)

	//те же методы для строк
	fmt.Printf("|%6s|%6s|\n", "foo", "b")
	fmt.Printf("|%-6s|%-6s|\n", "foo", "b")

	s := fmt.Sprintf("a %s", "string")
	fmt.Println(s)

	fmt.Fprintf(os.Stderr, "an %s\n", "error")
}
